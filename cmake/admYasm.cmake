#
MESSAGE(STATUS "Checking for YASM")
MESSAGE(STATUS "*****************")
IF(ADM_CPU_X86)
    find_program(YASM_YASM yasm)
    IF(YASM_YASM STREQUAL "<YASM_YASM>-NOTFOUND")
        MESSAGE(FATAL_ERROR "Yasm Not found. Stopping here.")
    ENDIF(YASM_YASM STREQUAL "<YASM_YASM>-NOTFOUND")
    MESSAGE(STATUS "Found as ${YASM_YASM}")
    enable_language(ASM_NASM)
    SET(CMAKE_ASM_SOURCE_FILE_EXTENSIONS nasm;nas;asm)
    set(CMAKE_LINK_EXECUTABLE ${YASM_YASM})
    SET(ASM_DIALECT "_NASM")
    SET(ASM_ARGS "")
    IF(APPLE)
            SET(ASM_ARGS_FORMAT  "-f macho64 -DPREFIX")
            SET(ASM_ARGS_FLAGS "-DARCH_X86_64=1 -DHAVE_ALIGNED_STACK=1")
    ELSE(APPLE)
      IF(WIN32)
        IF(ADM_CPU_X86_64)
            SET(ASM_ARGS_FORMAT  "-f win64")
            SET(ASM_ARGS_FLAGS "-DARCH_X86_64=1 -DHAVE_ALIGNED_STACK=1")
        ELSE(ADM_CPU_X86_64)
            SET(ASM_ARGS_FORMAT  "-f win32")
            SET(ASM_ARGS_FLAGS "-DARCH_X86_64=1 -DHAVE_ALIGNED_STACK=0")
        ENDIF(ADM_CPU_X86_64)
      ELSE(WIN32) # Linux
        SET(ASM_ARGS_FORMAT  "-f elf -DPIC")
            SET(ASM_ARGS_FLAGS "-DARCH_X86_64=1 -DHAVE_ALIGNED_STACK=1")
      ENDIF(WIN32)
    ENDIF(APPLE)
      
     
    IF( ADM_CPU_X86_64 )
        SET(ASM_ARGS_FORMAT "${ASM_ARGS_FORMAT} -m amd64")
    ELSE( ADM_CPU_X86_64 )
        SET(ASM_ARGS_FLAGS -DARCH_X86_64=0  -DHAVE_ALIGNED_STACK=0)
    ENDIF( ADM_CPU_X86_64 )
    
    SET(ASM_ARGS_FLAGS "${ASM_ARGS_FLAGS} -DHAVE_CPUNOP=0")
    
    SET(CMAKE_ASM${ASM_DIALECT}_FLAGS "${ASM_ARGS_FORMAT} ${ASM_ARGS_FLAGS}" )
    
    IF(NOT CMAKE_ASM${ASM_DIALECT}_COMPILE_OBJECT)
      SET(CMAKE_ASM${ASM_DIALECT}_COMPILE_OBJECT "<CMAKE_ASM${ASM_DIALECT}_COMPILER> -o <OBJECT> <SOURCE>")
    ENDIF(NOT CMAKE_ASM${ASM_DIALECT}_COMPILE_OBJECT)
    
    INCLUDE(CMakeASMInformation)
ENDIF(ADM_CPU_X86)
