// Generated by admPyClass.pl do not edit !
// audioCodec -> int scriptSetAudioCodec (str int couples ) 
static tp_obj zzpy_audioCodec(TP)
 {
jsLog("audioCodec invoked\n");
  tinyParams pm(tp);
  const char *p0= pm.asString();
  int p1= pm.asDouble();
  CONFcouple *p2=NULL;
  pm.makeCouples(&p2);
  int r=  scriptSetAudioCodec(p0,p1,p2); 
  return tp_number(r);
}
// addVideoFilter -> int scriptAddVideoFilter (str couples ) 
static tp_obj zzpy_addVideoFilter(TP)
 {
jsLog("addVideoFilter invoked\n");
  tinyParams pm(tp);
  const char *p0= pm.asString();
  CONFcouple *p1=NULL;
  pm.makeCouples(&p1);
  int r=  scriptAddVideoFilter(p0,p1); 
  return tp_number(r);
}
// loadVideo -> int scriptLoadVideo (str  ) 
static tp_obj zzpy_loadVideo(TP)
 {
jsLog("loadVideo invoked\n");
  tinyParams pm(tp);
  const char *p0= pm.asString();
  int r=  scriptLoadVideo(p0); 
  return tp_number(r);
}
// clearSegments -> int scriptClearSegments (void ) 
static tp_obj zzpy_clearSegments(TP)
 {
jsLog("clearSegments invoked\n");
  int r=  scriptClearSegments(); 
  return tp_number(r);
}
// getHeight -> int scriptGetHeight (void ) 
static tp_obj zzpy_getHeight(TP)
 {
jsLog("getHeight invoked\n");
  int r=  scriptGetHeight(); 
  return tp_number(r);
}
// setPostProc -> int scriptSetPostProc (int  int   int  ) 
static tp_obj zzpy_setPostProc(TP)
 {
jsLog("setPostProc invoked\n");
  tinyParams pm(tp);
  int p0= pm.asDouble();
  int p1= pm.asDouble();
  int p2= pm.asDouble();
  int r=  scriptSetPostProc(p0,p1,p2); 
  return tp_number(r);
}
// appendVideo -> int scriptAppendVideo (str  ) 
static tp_obj zzpy_appendVideo(TP)
 {
jsLog("appendVideo invoked\n");
  tinyParams pm(tp);
  const char *p0= pm.asString();
  int r=  scriptAppendVideo(p0); 
  return tp_number(r);
}
// audioMixer -> int scriptAudioMixer (str  ) 
static tp_obj zzpy_audioMixer(TP)
 {
jsLog("audioMixer invoked\n");
  tinyParams pm(tp);
  const char *p0= pm.asString();
  int r=  scriptAudioMixer(p0); 
  return tp_number(r);
}
// getFps1000 -> int scriptGetFps1000 (void ) 
static tp_obj zzpy_getFps1000(TP)
 {
jsLog("getFps1000 invoked\n");
  int r=  scriptGetFps1000(); 
  return tp_number(r);
}
// videoCodec -> int scriptSetVideoCodec (str couples ) 
static tp_obj zzpy_videoCodec(TP)
 {
jsLog("videoCodec invoked\n");
  tinyParams pm(tp);
  const char *p0= pm.asString();
  CONFcouple *p1=NULL;
  pm.makeCouples(&p1);
  int r=  scriptSetVideoCodec(p0,p1); 
  return tp_number(r);
}
// getWidth -> int scriptGetWidth (void ) 
static tp_obj zzpy_getWidth(TP)
 {
jsLog("getWidth invoked\n");
  int r=  scriptGetWidth(); 
  return tp_number(r);
}
// addSegment -> int scriptAddSegment (int  float   float  ) 
static tp_obj zzpy_addSegment(TP)
 {
jsLog("addSegment invoked\n");
  tinyParams pm(tp);
  int p0= pm.asDouble();
  float p1= pm.asFloat();
  float p2= pm.asFloat();
  int r=  scriptAddSegment(p0,p1,p2); 
  return tp_number(r);
}
// clearVideoFilters -> int scriptClearVideoFilters (void ) 
static tp_obj zzpy_clearVideoFilters(TP)
 {
jsLog("clearVideoFilters invoked\n");
  int r=  scriptClearVideoFilters(); 
  return tp_number(r);
}
// setContainer -> int scriptSetContainer (str couples ) 
static tp_obj zzpy_setContainer(TP)
 {
jsLog("setContainer invoked\n");
  tinyParams pm(tp);
  const char *p0= pm.asString();
  CONFcouple *p1=NULL;
  pm.makeCouples(&p1);
  int r=  scriptSetContainer(p0,p1); 
  return tp_number(r);
}
// audioReset -> int scriptAudioReset (void ) 
static tp_obj zzpy_audioReset(TP)
 {
jsLog("audioReset invoked\n");
  int r=  scriptAudioReset(); 
  return tp_number(r);
}
// getVideoCodec -> str scriptGetVideoCodec (void ) 
static tp_obj zzpy_getVideoCodec(TP)
 {
jsLog("getVideoCodec invoked\n");
  char *r=  scriptGetVideoCodec(); 
  return tp_string(r);
}
tp_obj zzpy__pyAdm_get(tp_vm *vm)
{
jsLog("zzpy__pyAdm_get invoked\n");
  tp_obj self=tp_getraw( vm);
  tinyParams pm(vm);
  void *me=pm.asThis(&self,100);
  char const *key = pm.asString();
  if (!strcmp(key, "audioResample"))
  {
     return tp_number(scriptGetResample());
  }
  if (!strcmp(key, "markerA"))
  {
     return tp_number(scriptGetMarkerA());
  }
  if (!strcmp(key, "markerB"))
  {
     return tp_number(scriptGetMarkerB());
  }
  return tp_get(vm,self,tp_string(key));
}
tp_obj zzpy__pyAdm_set(tp_vm *vm)
{
jsLog("zzpy__pyAdm_set invoked\n");
  tp_obj self=tp_getraw( vm);
  tinyParams pm(vm);
  void *me=pm.asThis(&self,100);
  char const *key = pm.asString();
  if (!strcmp(key, "audioResample"))
  {
     int val=pm.asDouble();
     scriptSetResample(val);
     return tp_None;
  }
  if (!strcmp(key, "markerA"))
  {
     double val=pm.asDouble();
     scriptSetMarkerA(val);
     return tp_None;
  }
  if (!strcmp(key, "markerB"))
  {
     double val=pm.asDouble();
     scriptSetMarkerB(val);
     return tp_None;
  }
  return tp_None;
}
static void myDtorpyAdm(tp_vm *vm,tp_obj self)
{
jsLog("myDtorpyAdm invoked\n");
}
static tp_obj myCtorpyAdm(tp_vm *vm)
{
jsLog("ctor of pyAdm invoked\n");
  tp_obj self = tp_getraw(vm);
  void *me=NULL;
  tp_obj cdata = tp_data(vm, 100, me);
  cdata.data.info->xfree = myDtorpyAdm;
  tp_set(vm, self, tp_string("cdata"), cdata);
  return tp_None;
}
static tp_obj zzpy__pyAdm_help(TP)
 {
  jsLog("audioCodec(str,int,couples)");
  jsLog("addVideoFilter(str,couples)");
  jsLog("loadVideo(str )");
  jsLog("clearSegments(void)");
  jsLog("getHeight(void)");
  jsLog("setPostProc(int ,int , int )");
  jsLog("appendVideo(str )");
  jsLog("audioMixer(str )");
  jsLog("getFps1000(void)");
  jsLog("videoCodec(str,couples)");
  jsLog("getWidth(void)");
  jsLog("addSegment(int ,float , float )");
  jsLog("clearVideoFilters(void)");
  jsLog("setContainer(str,couples)");
  jsLog("audioReset(void)");
  jsLog("getVideoCodec(void)");
};
tp_obj initClasspyAdm(tp_vm *vm)
{
  tp_obj myClass=tp_class(vm);
  tp_set(vm,myClass,tp_string("__init__"),tp_fnc(vm,myCtorpyAdm));
  tp_set(vm,myClass,tp_string("__set__"),tp_fnc(vm,zzpy__pyAdm_set));
  tp_set(vm,myClass,tp_string("__get__"),tp_fnc(vm,zzpy__pyAdm_get));
  tp_set(vm,myClass,tp_string("help"),tp_fnc(vm,zzpy__pyAdm_help));
  tp_set(vm,myClass,tp_string("audioCodec"),tp_fnc(vm,zzpy_audioCodec));
  tp_set(vm,myClass,tp_string("addVideoFilter"),tp_fnc(vm,zzpy_addVideoFilter));
  tp_set(vm,myClass,tp_string("loadVideo"),tp_fnc(vm,zzpy_loadVideo));
  tp_set(vm,myClass,tp_string("clearSegments"),tp_fnc(vm,zzpy_clearSegments));
  tp_set(vm,myClass,tp_string("getHeight"),tp_fnc(vm,zzpy_getHeight));
  tp_set(vm,myClass,tp_string("setPostProc"),tp_fnc(vm,zzpy_setPostProc));
  tp_set(vm,myClass,tp_string("appendVideo"),tp_fnc(vm,zzpy_appendVideo));
  tp_set(vm,myClass,tp_string("audioMixer"),tp_fnc(vm,zzpy_audioMixer));
  tp_set(vm,myClass,tp_string("getFps1000"),tp_fnc(vm,zzpy_getFps1000));
  tp_set(vm,myClass,tp_string("videoCodec"),tp_fnc(vm,zzpy_videoCodec));
  tp_set(vm,myClass,tp_string("getWidth"),tp_fnc(vm,zzpy_getWidth));
  tp_set(vm,myClass,tp_string("addSegment"),tp_fnc(vm,zzpy_addSegment));
  tp_set(vm,myClass,tp_string("clearVideoFilters"),tp_fnc(vm,zzpy_clearVideoFilters));
  tp_set(vm,myClass,tp_string("setContainer"),tp_fnc(vm,zzpy_setContainer));
  tp_set(vm,myClass,tp_string("audioReset"),tp_fnc(vm,zzpy_audioReset));
  tp_set(vm,myClass,tp_string("getVideoCodec"),tp_fnc(vm,zzpy_getVideoCodec));
  return myClass;
}
