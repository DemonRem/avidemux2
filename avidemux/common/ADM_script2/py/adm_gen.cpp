// Generated by admPyClass.pl do not edit !
//int  scriptLoadVideo <const char * >
tp_obj zzpy_loadVideo(TP)
{
tinyParams pm(tp);
const char * p0=pm.asString();
int r=scriptLoadVideo(p0); 
return tp_number(r);
}
//int  scriptClearSegments <void>
tp_obj zzpy_clearSegments(TP)
{
int r=scriptClearSegments(); 
return tp_number(r);
}
//int  scriptAppendVideo <const char * >
tp_obj zzpy_appendVideo(TP)
{
tinyParams pm(tp);
const char * p0=pm.asString();
int r=scriptAppendVideo(p0); 
return tp_number(r);
}
//int  scriptAddSegment <int  float   float >
tp_obj zzpy_addSegment(TP)
{
tinyParams pm(tp);
int p0=pm.asDouble();
float p1=pm.asFloat();
float p2=pm.asFloat();
int r=scriptAddSegment(p0,p1,p2); 
return tp_number(r);
}
//int  scriptSetPostProc <int  int   int >
tp_obj zzpy_setPostProc(TP)
{
tinyParams pm(tp);
int p0=pm.asDouble();
int p1=pm.asDouble();
int p2=pm.asDouble();
int r=scriptSetPostProc(p0,p1,p2); 
return tp_number(r);
}
//int  scriptGetWidth <void>
tp_obj zzpy_getWidth(TP)
{
int r=scriptGetWidth(); 
return tp_number(r);
}
//int  scriptGetHeight <void>
tp_obj zzpy_getHeight(TP)
{
int r=scriptGetHeight(); 
return tp_number(r);
}
//int  scriptGetFps1000 <void>
tp_obj zzpy_getFps1000(TP)
{
int r=scriptGetFps1000(); 
return tp_number(r);
}
//str  scriptGetVideoCodec <void>
tp_obj zzpy_getVideoCodec(TP)
{
char *r=scriptGetVideoCodec(); 
return tp_string(r);
}
//int  scriptAudioReset <void>
tp_obj zzpy_audioReset(TP)
{
int r=scriptAudioReset(); 
return tp_number(r);
}
//int  scriptAudioMixer <const char * >
tp_obj zzpy_audioMixer(TP)
{
tinyParams pm(tp);
const char * p0=pm.asString();
int r=scriptAudioMixer(p0); 
return tp_number(r);
}
//int  scriptClearVideoFilters <void>
tp_obj zzpy_clearVideoFilters(TP)
{
int r=scriptClearVideoFilters(); 
return tp_number(r);
}
//int  scriptSetVideoCodec <const char * couples>
tp_obj zzpy_videoCodec(TP)
{
tinyParams pm(tp);
const char * p0=pm.asString();
CONFcouple *p1=NULL;
pm.makeCouples(&p1);
int r=scriptSetVideoCodec(p0,p1); 
return tp_number(r);
}
//int  scriptSetAudioCodec <const char * int couples>
tp_obj zzpy_audioCodec(TP)
{
tinyParams pm(tp);
const char * p0=pm.asString();
int p1=pm.asDouble();
CONFcouple *p2=NULL;
pm.makeCouples(&p2);
int r=scriptSetAudioCodec(p0,p1,p2); 
return tp_number(r);
}
//int  scriptSetContainer <const char * couples>
tp_obj zzpy_setContainer(TP)
{
tinyParams pm(tp);
const char * p0=pm.asString();
CONFcouple *p1=NULL;
pm.makeCouples(&p1);
int r=scriptSetContainer(p0,p1); 
return tp_number(r);
}
//int  scriptAddVideoFilter <const char * couples>
tp_obj zzpy_addVideoFilter(TP)
{
tinyParams pm(tp);
const char * p0=pm.asString();
CONFcouple *p1=NULL;
pm.makeCouples(&p1);
int r=scriptAddVideoFilter(p0,p1); 
return tp_number(r);
}
static tp_obj myCtorpyAdm(tp_vm *vm)
{
}
static tp_obj zzpy_pyAdm_help(tp_vm *vm)
{
jsLog("loadVideo");
jsLog("clearSegments");
jsLog("appendVideo");
jsLog("addSegment");
jsLog("setPostProc");
jsLog("getWidth");
jsLog("getHeight");
jsLog("getFps1000");
jsLog("getVideoCodec");
jsLog("audioReset");
jsLog("audioMixer");
jsLog("clearVideoFilters");
jsLog("videoCodec");
jsLog("audioCodec");
jsLog("setContainer");
jsLog("addVideoFilter");
return tp_None;
}
tp_obj initClasspyAdm(tp_vm *vm)
{
 tp_obj myClass=tp_class(vm);
 tp_set(vm,myClass,tp_string("__init__"),tp_fnc(vm,myCtorpyAdm));
 tp_set(vm,myClass,tp_string("loadVideo"),tp_fnc(vm,zzpy_loadVideo));
 tp_set(vm,myClass,tp_string("clearSegments"),tp_fnc(vm,zzpy_clearSegments));
 tp_set(vm,myClass,tp_string("appendVideo"),tp_fnc(vm,zzpy_appendVideo));
 tp_set(vm,myClass,tp_string("addSegment"),tp_fnc(vm,zzpy_addSegment));
 tp_set(vm,myClass,tp_string("setPostProc"),tp_fnc(vm,zzpy_setPostProc));
 tp_set(vm,myClass,tp_string("getWidth"),tp_fnc(vm,zzpy_getWidth));
 tp_set(vm,myClass,tp_string("getHeight"),tp_fnc(vm,zzpy_getHeight));
 tp_set(vm,myClass,tp_string("getFps1000"),tp_fnc(vm,zzpy_getFps1000));
 tp_set(vm,myClass,tp_string("getVideoCodec"),tp_fnc(vm,zzpy_getVideoCodec));
 tp_set(vm,myClass,tp_string("audioReset"),tp_fnc(vm,zzpy_audioReset));
 tp_set(vm,myClass,tp_string("audioMixer"),tp_fnc(vm,zzpy_audioMixer));
 tp_set(vm,myClass,tp_string("clearVideoFilters"),tp_fnc(vm,zzpy_clearVideoFilters));
 tp_set(vm,myClass,tp_string("videoCodec"),tp_fnc(vm,zzpy_videoCodec));
 tp_set(vm,myClass,tp_string("audioCodec"),tp_fnc(vm,zzpy_audioCodec));
 tp_set(vm,myClass,tp_string("setContainer"),tp_fnc(vm,zzpy_setContainer));
 tp_set(vm,myClass,tp_string("addVideoFilter"),tp_fnc(vm,zzpy_addVideoFilter));
 tp_set(vm,myClass,tp_string("help"),tp_fnc(vm,zzpy_pyAdm_help));
 return myClass;
}
