// Generated by admPyClass.pl do not edit !
// printTiming -> int jsPrintTiming (int  ) 
static tp_obj zzpy_printTiming(TP)
 {
  tp_obj self=tp_getraw( tp);
  tinyParams pm(tp);
  void *me=(void *)pm.asThis(&self,ADM_PYID_EDITOR);
  int p0= pm.asInt();
  int r=  jsPrintTiming(p0); 
  return tp_number(r);
}
// dumpSegment -> int jsDumpSegments (void ) 
static tp_obj zzpy_dumpSegment(TP)
 {
  tp_obj self=tp_getraw( tp);
  tinyParams pm(tp);
  void *me=(void *)pm.asThis(&self,ADM_PYID_EDITOR);
  int r=  jsDumpSegments(); 
  return tp_number(r);
}
// dumpRefVideo -> int jsDumpRefVideos (void ) 
static tp_obj zzpy_dumpRefVideo(TP)
 {
  tp_obj self=tp_getraw( tp);
  tinyParams pm(tp);
  void *me=(void *)pm.asThis(&self,ADM_PYID_EDITOR);
  int r=  jsDumpRefVideos(); 
  return tp_number(r);
}
tp_obj zzpy__pyEditor_get(tp_vm *vm)
{
  tp_obj self=tp_getraw( vm);
  tinyParams pm(vm);
  void *me=(void *)pm.asThis(&self,ADM_PYID_EDITOR);
  char const *key = pm.asString();
  if (!strcmp(key, "printTiming"))
  {
     return tp_method(vm,self,zzpy_printTiming);
  }
  if (!strcmp(key, "dumpSegment"))
  {
     return tp_method(vm,self,zzpy_dumpSegment);
  }
  if (!strcmp(key, "dumpRefVideo"))
  {
     return tp_method(vm,self,zzpy_dumpRefVideo);
  }
  return tp_get(vm,self,tp_string(key));
}
tp_obj zzpy__pyEditor_set(tp_vm *vm)
{
  tp_obj self=tp_getraw( vm);
  tinyParams pm(vm);
  void *me=(void *)pm.asThis(&self,ADM_PYID_EDITOR);
  char const *key = pm.asString();
  return tp_None;
}
// Dctor
static void myDtorpyEditor(tp_vm *vm,tp_obj self)
{
}
// Ctor ()
static tp_obj myCtorpyEditor(tp_vm *vm)
{
  tp_obj self = tp_getraw(vm);
  tinyParams pm(vm);
  void *me=NULL;
  tp_obj cdata = tp_data(vm, ADM_PYID_EDITOR, me);
  cdata.data.info->xfree = myDtorpyEditor;
  tp_set(vm, self, tp_string("cdata"), cdata);
  return tp_None;
}
static tp_obj zzpy__pyEditor_help(TP)
 {
  jsLog("printTiming(int )");
  jsLog("dumpSegment(void)");
  jsLog("dumpRefVideo(void)");
};
tp_obj initClasspyEditor(tp_vm *vm)
{
  tp_obj myClass=tp_class(vm);
  tp_set(vm,myClass,tp_string("__init__"),tp_fnc(vm,myCtorpyEditor));
  tp_set(vm,myClass,tp_string("__set__"),tp_fnc(vm,zzpy__pyEditor_set));
  tp_set(vm,myClass,tp_string("__get__"),tp_fnc(vm,zzpy__pyEditor_get));
  tp_set(vm,myClass,tp_string("help"),tp_fnc(vm,zzpy__pyEditor_help));
  return myClass;
}
